import styled, { keyframes } from 'styled-components';
import { useRecoilValue, useResetRecoilState, useSetRecoilState } from "recoil";
import axios from 'axios';
import {
  UserInfoState,
} from "../store/State";

import { Route, Redirect } from 'react-router-dom';
import { MainPaddingContainer } from "../../commons/style/layoutStyle";
import { FlexCenter, FlexColBetween } from "../../commons/style/SharedStyle";
import { useState, useEffect } from 'react';
import Text from "../../components/atoms/Text";


import jwtDecode from "jwt-decode";

  // 소key
  // const client_id =
  //   "776331757143-c17p5tgmtrc53mnrqrst4f5s6ltg3npj.apps.googleusercontent.com";
  // const client_secret = "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";
  
  // 동key
  // const client_id =
  //   "781680119308-d0jbnhpcmrcj7fb65ls9crj7lh6k7v9q.apps.googleusercontent.com";
  // const client_secret = "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";
  
  // 동key2
  const client_id =
    "515621990572-qofqid3d40c2u7t7in2n5gjmf4hg4tre.apps.googleusercontent.com";
  const client_secret = "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";


const AuthRoute = ({ Component: Component, ...rest }) => {

  const accessToken = useRecoilValue(UserInfoState).accessToken;
  const refreshToken = useRecoilValue(UserInfoState).refreshToken;
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isChecking, setIsChecking] = useState(true);
  const setUserInfo = useSetRecoilState(UserInfoState);

  const isTokenExpired = () => {
    const decodedToken = jwtDecode(accessToken);
    const expirationTime = decodedToken.exp; //토큰 만료시간이 초 단위라서
    const now = Date.now() / 1000; // 초 단위로 변환
    return now > expirationTime; //토큰 만료시 true
  };

  useEffect(() => {
    if (accessToken) {
      const url = `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`;
      const refreshUrl = `https://oauth2.googleapis.com/token`; // 토큰 재발급 URL
        if (!isTokenExpired()) { // atk 만료 X
            axios.get(url) 
                .then(response => { // atk유효
                    console.log(response);
                    setIsAuthenticated(true);
                    setIsChecking(false);
                }) 
                .catch(error => { //atk유효X
                    console.log(error);
                    setIsAuthenticated(false);
                    setIsChecking(false);
                });
        } else if (refreshToken) { // atk 만료 O
            const data = {
                client_id,
                client_secret,
                refresh_token: refreshToken,
                grant_type: "refresh_token",
            };
            axios.post(refreshUrl, new URLSearchParams(data))
                .then(response => { //rtk 유효
                    console.log(response.data);
                    setUserInfo((prev) => ({
                      ...prev,
                      accessToken: response.data.access_token,
                    }));
                    setIsAuthenticated(true);
                    setIsChecking(false);
                })
                .catch(err => { //rtk 만료시
                    console.error("Error refreshing token:", err);
                    setIsAuthenticated(false);
                    setIsChecking(false);
                });
        } else { // atk, rtk 둘다 없으면
            setIsAuthenticated(false);
            setIsChecking(false);
        }
    } else {
        setIsChecking(false);
    }
}, [accessToken, refreshToken]);

return (
    <Route
        {...rest}
        render={props => 
            isChecking ? (
              <MainPaddingContainer>
              <StyledLoadingCenter>
                <StyledLoadingContent>
                  <Text size="X-Large" color="White" fontFamily="PyeongChang-Bold">
                    로딩중입니다
                  </Text>
                  <Loader />
                </StyledLoadingContent>
              </StyledLoadingCenter>
            </MainPaddingContainer>
            ) : isAuthenticated ? (
                <Component {...props} />
            ) : (
                <Redirect to="/" /> //로그인 페이지 이동
            )
        }
    />
);


};

export default AuthRoute;


const StyledLoadingCenter = styled.div`
  ${FlexCenter}
  height: 100%;
`;

const StyledLoadingContent = styled.div`
  ${FlexColBetween}
  height: 30%;
`;


const flippx = keyframes`
  0%, 49% {
    transform: scaleX(1);
  }
  50%, 100% {
    transform: scaleX(-1);
  }
`;

const spin = keyframes`
  100% {
    transform: rotate(360deg);
  }
`;

export const Loader = styled.div`
  width: calc(100px - 24px);
  height: 50px;
  position: relative;
  animation: ${flippx} 2s infinite linear;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    margin: auto;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #fff;
    transform-origin: -24px 50%;
    animation: ${spin} 1s infinite linear;
  }

  &::after {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    width: 48px;
    height: 48px;
    border-radius: 50%;
  }
`;
